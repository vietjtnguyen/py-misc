#!/usr/bin/python
import numpy as np
import pandas as pd
import scipy as sp
import scipy.ndimage as nd
import scipy.signal as sg

from math import *
import datetime, itertools, pickle, random, re, os, sys

function_markers = '!*#-='

items = []
functions = []

for line in sys.stdin.readlines():

    line = line[:-1] # remove new line at the end

    if len(line) >= 2 and line[0] in function_markers:
        function_marker = line[0]
        use_arglist = line[1] == '*'
        if use_arglist:
            function_text = line[2:]
        else:
            function_text = line[1:]

        # append lambda if it isn't there
        if not function_text.startswith('lambda '):
            function_text = 'lambda {:}'.format(function_text)

        # create actual function
        code_object = compile(function_text, '', 'eval')
        func = eval(code_object)

        if function_marker == '!': # map
            if use_arglist:
                for i in range(len(items)):
                    items[i] = func(*items[i])
            else:
                for i in range(len(items)):
                    items[i] = func(items[i])
            functions.append(line)
        elif line[0] == '*': # apply
            items = func(items)
            functions.append(line)
        elif line[0] == '#': # enumerate
            if use_arglist:
                for i, item in enumerate(items):
                    items[i] = func(i, item)
            else:
                for i, item in enumerate(items):
                    items[i] = func((i, item))
            functions.append(line)
        elif line[0] == '-': # filter
            items = filter(func, items)
            functions.append(line)
        elif line[0] == '=': # reduce
            result = func(items)
            if line.rfind('#') == -1:
                functions.append('{:}# = {:}'.format(line, str(result)))
            else:
                functions.append('{:}# = {:}'.format(line[:line.rfind('#')], str(result)))
    else:
        if len(functions) > 0:
            for item in items:
                print(item)
            for function_text in functions:
                print(function_text)
            del items
            del functions
            items = []
            functions = []

        items.append(line)

for item in items:
    print(item)
for function_text in functions:
    print(function_text)

